// backend/server.js
const express = require('express');
const cors = require('cors');
const pool = require('./db');

const app = express();
app.use(cors());
app.use(express.json());

// Test route
app.get('/', (req, res) => {
  res.send('SafePitch API is running...');
});

// Get all coaches
app.get('/api/coaches', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM coaches_credentials');
    res.json(result.rows);
  } catch (err) {
    console.error(err);
    res.status(500).send('Server error');
  }
});

// Get all players
app.get('/api/players', async (req, res) => {
  try {
    const result = await pool.query('SELECT player_id, first_name, last_name, team_name FROM players');
    res.json(result.rows);
  } catch (err) {
    console.error('Error fetching players:', err);
    res.status(500).json({ error: 'Server error' });
  }
});

// Get player personal info by ID
app.get('/api/players/:id/info', async (req, res) => {
  try {
    const { id } = req.params;
    
    const result = await pool.query(
      'SELECT * FROM players_personal_info WHERE player_id = $1',
      [id]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Player not found' });
    }
    
    res.json(result.rows[0]);
  } catch (err) {
    console.error('Error fetching player info:', err);
    res.status(500).json({ error: 'Server error' });
  }
});

// Get all game records
app.get('/api/games', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM players_games_records ORDER BY game_date DESC');
    res.json(result.rows);
  } catch (err) {
    console.error(err);
    res.status(500).send('Server error');
  }
});

// Get game records for a specific player
app.get('/api/games/player/:playerId', async (req, res) => {
  try {
    const { playerId } = req.params;
    const result = await pool.query(
      'SELECT * FROM players_games_records WHERE player_id = $1 ORDER BY game_date DESC',
      [playerId]
    );
    res.json(result.rows);
  } catch (err) {
    console.error('Error fetching game records:', err);
    res.status(500).json({ error: 'Server error' });
  }
});

// Add a new game record
app.post('/api/games', async (req, res) => {
  try {
    const {
      player_id,
      game_date,
      pitch_type,
      release_speed,
      spin_rate,
      release_pos_x,
      release_pos_y,
      release_pos_z,
    } = req.body;

    // Validate required fields
    if (!player_id || !game_date || !pitch_type || release_speed === '' || spin_rate === '') {
      return res.status(400).json({ 
        error: 'Missing required fields: player_id, game_date, pitch_type, release_speed, spin_rate' 
      });
    }

    // Validate that player exists
    const playerCheck = await pool.query(
      'SELECT player_id FROM players WHERE player_id = $1',
      [player_id]
    );

    if (playerCheck.rows.length === 0) {
      return res.status(404).json({ error: `Player with ID ${player_id} not found` });
    }

    // Convert empty strings to NULL for optional fields
    const posX = release_pos_x === '' ? null : parseFloat(release_pos_x);
    const posY = release_pos_y === '' ? null : parseFloat(release_pos_y);
    const posZ = release_pos_z === '' ? null : parseFloat(release_pos_z);

    // Insert game record (record_id is auto-generated by database)
    const result = await pool.query(
      `INSERT INTO players_games_records 
       (player_id, game_date, pitch_type, release_speed, spin_rate, release_pos_x, release_pos_y, release_pos_z)
       VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
       RETURNING *`,
      [
        player_id, 
        game_date, 
        pitch_type, 
        parseFloat(release_speed), 
        parseInt(spin_rate), 
        posX, 
        posY, 
        posZ
      ]
    );

    console.log('Game record added:', result.rows[0]);
    res.status(201).json(result.rows[0]);
  } catch (err) {
    console.error('Error adding game record:', err);
    res.status(500).json({ error: 'Server error: ' + err.message });
  }
});

// Update a game record
app.put('/api/games/:recordId', async (req, res) => {
  try {
    const { recordId } = req.params;
    const {
      game_date,
      pitch_type,
      release_speed,
      spin_rate,
      release_pos_x,
      release_pos_y,
      release_pos_z,
    } = req.body;

    // Convert empty strings to NULL for optional fields
    const posX = release_pos_x === '' ? null : parseFloat(release_pos_x);
    const posY = release_pos_y === '' ? null : parseFloat(release_pos_y);
    const posZ = release_pos_z === '' ? null : parseFloat(release_pos_z);

    const result = await pool.query(
      `UPDATE players_games_records 
       SET game_date = $1, pitch_type = $2, release_speed = $3, spin_rate = $4, 
           release_pos_x = $5, release_pos_y = $6, release_pos_z = $7
       WHERE record_id = $8
       RETURNING *`,
      [game_date, pitch_type, release_speed, spin_rate, posX, posY, posZ, recordId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Game record not found' });
    }

    res.json(result.rows[0]);
  } catch (err) {
    console.error('Error updating game record:', err);
    res.status(500).json({ error: 'Server error' });
  }
});

// Delete a game record
app.delete('/api/games/:recordId', async (req, res) => {
  try {
    const { recordId } = req.params;

    const result = await pool.query(
      'DELETE FROM players_games_records WHERE record_id = $1 RETURNING *',
      [recordId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Game record not found' });
    }

    res.json({ message: 'Game record deleted', deleted: result.rows[0] });
  } catch (err) {
    console.error('Error deleting game record:', err);
    res.status(500).json({ error: 'Server error' });
  }
});

const PORT = 5001;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});